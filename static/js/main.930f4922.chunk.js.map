{"version":3,"sources":["data.js","constants.js","components/Results.jsx","components/Level.jsx","components/Layout.jsx","components/Quiz.jsx","index.js"],"names":["name","type","question","choices","answer","result","add","Results","winningResult","this","props","gameState","resultText","className","onClick","setGameState","resultAchieved","React","Component","Level","onEventHandler","e","level","value","target","DATA","result_index","console","log","renderQuestion","renderAnswers","arr","choice","length","push","renderTextfield","text","textfieldValue","state","onChange","setState","getResultCardsStyle","resultNumber","resultCardStyle","backgroundColor","color","FlyingStars","isRandomized","flyingStars","character","coolEmojis","Math","floor","random","i","star","key","style","position","left","top","screenBackground","backgroundImage","toString","slice","Layout","isEmojiMode","destinationsCompleted","gameContent","align","href","class","Quiz","action","params","resultTemp","winningResultTemp","n","newDestinationsCompleted","includes","sharedProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.930f4922.chunk.js","sourcesContent":["import {\n    START,\n    QUESTION_TYPE_MULTIPLE,\n    RESULT_RED,\n    RESULT_BLUE,\n    RESULT_YELLOW,\n    RESULT_GREEN,\n    RESULT_BLACK,\n    RESULTS\n} from \"./constants\";\n\nexport default [\n    {\n        // START\n        name: \"start\",\n        type: START\n    },\n    {\n        // Question one\n        name: \"question-one\",\n        type: QUESTION_TYPE_MULTIPLE,\n        question: \"Which of these fruits do you prefer?\",\n        choices: [\n            {\n                // Choice one\n                answer: \"Blueberry\",\n                result: RESULT_RED,\n                add: 1\n            },\n            {\n                // Choice two\n                answer: \"Apple\",\n                result: RESULT_BLUE,\n                add: 1\n            },\n            {\n                // Choice three\n                answer: \"Banana\",\n                result: RESULT_YELLOW,\n                add: 1\n            },\n            {\n                // Choice four\n                answer: \"Grape\",\n                result: RESULT_GREEN,\n                add: 1\n            },\n            {\n                // Choice five\n                answer: \"\\\"I don't like fruit. It scares me.\\\"\",\n                result: RESULT_BLACK,\n                add: 1\n            }\n        ]\n    },\n    {\n        // Question two, this question doesn't influence the results at all.\n        name: \"question-two\",\n        type: QUESTION_TYPE_MULTIPLE,\n        question: \"What is your name?\",\n        choices: [\n            {\n                // Choice one\n                answer: \"Joshua\",\n                result: 0,\n                add: 0\n            },\n            {\n                // Choice two\n                answer: \"Denise\",\n                result: 0,\n                add: 0\n            },\n            {\n                // Choice three\n                answer: \"Not listed\",\n                result: 0,\n                add: 0\n            }\n        ]\n    },\n    {\n        // Question three\n        name: \"question-three\",\n        type: QUESTION_TYPE_MULTIPLE,\n        question: \"How is your day?\",\n        choices: [\n            {\n                // Choice one\n                answer: \"Awesome\",\n                result: RESULT_RED,\n                add: 1\n            },\n            {\n                // Choice two\n                answer: \"Good\",\n                result: RESULT_BLUE,\n                add: 1\n            },\n            {\n                // Choice three\n                answer: \"Decent\",\n                result: RESULT_YELLOW,\n                add: 1\n            },\n            {\n                // Choice four\n                answer: \"Amiss\",\n                result: RESULT_GREEN,\n                add: 1\n            },\n            {\n                // Choice five\n                answer: \"Bad\",\n                result: RESULT_BLACK,\n                add: 1\n            }\n        ]\n    },\n    {\n        // Question four\n        name: \"question-four\",\n        type: QUESTION_TYPE_MULTIPLE,\n        question: \"Pick a color that describes you: \",\n        choices: [\n            {\n                // Choice one\n                answer: \"Red\",\n                result: RESULT_BLUE,\n                add: 5\n            },\n            {\n                // Choice two\n                answer: \"Blue\",\n                result: RESULT_RED,\n                add: 1\n            },\n            {\n                // Choice three\n                answer: \"Yellow\",\n                result: RESULT_YELLOW,\n                add: 1\n            },\n            {\n                // Choice four\n                answer: \"Magenta\",\n                result: RESULT_GREEN,\n                add: 1\n            },\n            {\n                // Choice five\n                answer: \"Purple\",\n                result: RESULT_BLACK,\n                add: 1\n            }\n        ]\n    },\n    {\n        // Results\n        name: \"results\",\n        type: RESULTS\n    }\n];\n","export const START = \"start\";\nexport const QUESTION_TYPE_MULTIPLE = \"question-type-multiple\";\nexport const QUESTION_TYPE_IMAGE = \"question-type-image\";\nexport const QUESTION_TYPE_TEXTFIELD = \"question-type-textfield\";\nexport const QUESTION_TYPE_VIDEO = \"question-type-video\";\nexport const RESULTS = \"results\";\nexport const SET_LEVEL = \"set-level\";\nexport const SET_RESULTS = \"set-results\";\nexport const SET_NAME = \"set-name\";\nexport const TEXT = \"text\";\nexport const RESULT_RED = 0;\nexport const RESULT_BLUE = 1;\nexport const RESULT_YELLOW = 2;\nexport const RESULT_GREEN = 3;\nexport const RESULT_BLACK = 4;\nexport const RESET = 'reset';\n","import React from 'react';\nimport { RESULT_RED, RESULT_BLUE, RESULT_YELLOW, RESULT_GREEN, RESULT_BLACK, RESET } from '../constants';\n\nexport default class Results extends React.Component {\n  render() {\n    let { winningResult } = this.props.gameState;\n    let resultText = null;\n    // Various results\n    if (winningResult === RESULT_RED) {\n      resultText = (\n        <div>\n          <h1>You're red!</h1>\n          <p>Good job! This is a good color.</p>\n        </div>\n      );\n    } else if (winningResult === RESULT_BLUE) {\n      resultText = (\n        <div>\n          <h1>You are the color BLUE.</h1>\n          <p>Haha! Thought you were going to get red, didn't you? You're probably not the type to expect the unexpected. Sad!</p>\n        </div>\n      );\n    } else if (winningResult === RESULT_YELLOW) {\n      resultText = (\n        <div className=\"result-yellow\">\n          <h1>You are the color YELLOW.</h1>\n          <p>This is a pretty good indication you're a Gryffindor. I'm a Hufflepuff and <span className=\"underline\">I strongly dislike</span> Gryffindors. Navigate to your browser's corresponding ❌ button to get your big hiney OUT of here!!*</p>\n          <div className=\"results-subtext-1\">*This result brought to you by the \"Huff'N'Puff HP Potterhead Potheads\"** group on Facebook so look us up. We're accepting applications for new mods. keep it 💯!!</div>\n        </div>\n      );\n    } else if (winningResult === RESULT_GREEN) {\n      resultText = (\n        <div>\n          <h1>You are the color GREEN.</h1>\n          <p>\n            Riding the waves of life, you are constantly searching for a purpose. Before, you were asleep. But now, you are awake. Your eyes were closed but now you see. That door that was previously\n            closed is now open. You miss 100% of the shots you don't take. Get out there. Otherwise, you'll stay inside.\n          </p>\n        </div>\n      );\n    } else if (winningResult === RESULT_BLACK) {\n      resultText = (\n        <div>\n          <h1>You are the color BLACK.</h1>\n          <p>Black. You're a contrarian: Edgy and disagreeable. You have encountered many life complications due to your personality defects.</p>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        {resultText}\n        <div className=\"button try-again\" onClick={() => this.props.setGameState(RESET, { resultAchieved: winningResult })}>Try again?</div>\n        {winningResult === RESULT_YELLOW && (\n          <div className=\"results-subtext-2\">(**not an actual facebook group)</div>\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport DATA from '../data';\nimport Results from './Results';\nimport { START, QUESTION_TYPE_MULTIPLE, QUESTION_TYPE_TEXTFIELD, RESULTS, SET_LEVEL, SET_RESULTS, SET_NAME } from '../constants';\nimport '../index.css';\n\nexport default class Level extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textfieldValue: '',\n    };\n  }\n\n  onEventHandler = (e) => {\n    const { level } = this.props.gameState;\n    const { value } = e.target;\n    if (DATA[level].type === START) {\n      this.props.setGameState(SET_LEVEL);\n    } else if (DATA[level].type === QUESTION_TYPE_MULTIPLE) {\n      this.props.setGameState(SET_RESULTS, {\n        add: DATA[level].choices[value].add,\n        result_index: DATA[level].choices[value].result,\n      });\n      this.props.setGameState(SET_LEVEL);\n    } else {\n      console.log('error');\n    }\n  };\n\n  // Render question to page\n  renderQuestion = () => {\n    const { level } = this.props.gameState;\n    return DATA[level].question;\n  };\n\n  // Render answers to page\n  renderAnswers = () => {\n    const arr = [];\n    const { level } = this.props.gameState;\n    for (let choice = 0; choice < DATA[level].choices.length; choice++) {\n      arr.push(\n        <div>\n          <input type=\"button\" onClick={this.onEventHandler} value={choice} />\n          <label>{' ' + DATA[level].choices[choice].answer}</label>\n        </div>\n      );\n    }\n    return <div>{arr}</div>;\n  };\n\n  // Render text to a page\n  // renderText = () => {\n  //   const { level } = this.props.gameState;\n  //   return <div className=\"text\">{DATA[level].text}</div>;\n  // };\n\n  // Render a text field to the page\n  renderTextfield = (text) => {\n    const { textfieldValue } = this.state;\n    return (\n      <div>\n        {text}\n        <br />\n        <input\n          value={textfieldValue}\n          onChange={(e) => {\n            this.setState({\n              textfieldValue: e.target.value,\n            });\n          }}\n        />\n        <button\n          onClick={() => {\n            this.props.setGameState(SET_NAME, {\n              name: textfieldValue,\n            });\n            this.props.setGameState(SET_LEVEL);\n          }}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  };\n\n  // Render the results of a page\n  // renderResults = () => {\n  //   return <Results gameState={this.props.gameState} />;\n  // };\n\n  // Render entire level\n  render() {\n    const { level } = this.props.gameState;\n    // Build level\n    switch (DATA[level].type) {\n      case START:\n        return (\n          <div className=\"start\" onClick={this.onEventHandler}>\n            <div className=\"start-the\">The</div> Color Quiz\n          </div>\n        );\n      case RESULTS:\n        return (\n          <div className=\"results\">\n            <Results gameState={this.props.gameState} setGameState={this.props.setGameState} />\n          </div>\n        );\n      case QUESTION_TYPE_MULTIPLE:\n        // Render multiple-choice question\n        return (\n          <div className=\"question-answers\">\n            <div className=\"question\">{this.renderQuestion()}</div>\n            <div className=\"answers\">{this.renderAnswers()}</div>\n          </div>\n        );\n      case QUESTION_TYPE_TEXTFIELD:\n        return <div>{this.renderTextfield()}</div>;\n      default:\n        break;\n    }\n  }\n}\n","import React from 'react';\nimport DATA from '../data';\nimport { START, QUESTION_TYPE_MULTIPLE, QUESTION_TYPE_TEXTFIELD, RESULTS, SET_LEVEL, SET_RESULTS, SET_NAME, RESET } from '../constants';\n\nconst randomLinearGradientBackground = () => {\n  var randomAngle = Math.random() * 360;\n  var randomHex1 = (Math.random() * 255 ** 3).toString(16).slice(0, 6);\n  var randomHex2 = (Math.random() * 255 ** 3).toString(16).slice(0, 6);\n  var linearGradient = 'linear-gradient(' + randomAngle + 'deg, #' + randomHex1 + ', #' + randomHex2 + ')';\n  return { backgroundImage: linearGradient };\n};\n\nconst getResultCardsStyle = (resultNumber) => {\n  let resultCardStyle = {};\n  switch (resultNumber) {\n    case 0:\n      resultCardStyle = { backgroundColor: '#A11111', color: 'white' };\n      break;\n    case 1:\n      resultCardStyle = { backgroundColor: '#1141A1', color: 'white' };\n      break;\n    case 2:\n      resultCardStyle = { backgroundColor: '#F3E13D', color: 'black' };\n      break;\n    case 3:\n      resultCardStyle = { backgroundColor: '#6d914d', color: 'white' };\n      break;\n    case 4:\n      resultCardStyle = { backgroundColor: 'black', color: 'white' };\n      break;\n    default:\n      break;\n  }\n  return resultCardStyle;\n};\n\nconst FlyingStars = ({ isRandomized = false }) => {\n  let flyingStars = [];\n  let character = '*';\n  if (isRandomized) {\n    let coolEmojis = ['😀', '🥺', '🤬', '😄', '🤣', '🤠', '👺', '👅', '🎒'];\n    const emoji_i = Math.floor(Math.random() * coolEmojis.length);\n    character = coolEmojis[emoji_i];\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let star = (\n      <div\n        className=\"flying-stars\"\n        key={`flying-star-${i}`}\n        style={{\n          position: 'absolute',\n          left: (Math.random() * 1000 - 1050) * 2,\n          top: (Math.random() * 1000 - 1050) * 2,\n        }}\n      >\n        {character}\n      </div>\n    );\n    flyingStars.push(star);\n  }\n  return <div>{flyingStars}</div>;\n};\n\nconst screenBackground = (level, winningResult) => {\n  if (level === 0) {\n    return {\n      backgroundImage: 'linear-gradient(45deg, #878CA6, #6298FE)',\n    };\n  } else if (level === DATA.length - 1) {\n    return getResultCardsStyle(winningResult);\n  }\n  return randomLinearGradientBackground();\n};\n\nexport default class Layout extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEmojiMode: false,\n    };\n  }\n  onEventHandler = (e) => {\n    const { level } = this.props.gameState;\n    const { setGameState } = this.props;\n    const { value } = e.target;\n    if (DATA[level].type === START) {\n      setGameState(SET_LEVEL);\n    } else if (DATA[level].type === QUESTION_TYPE_MULTIPLE) {\n      setGameState(SET_RESULTS, {\n        add: DATA[level].choices[value].add,\n        result_index: DATA[level].choices[value].result,\n      });\n      setGameState(SET_LEVEL);\n    } else {\n      console.log('error');\n    }\n  };\n\n  render() {\n    const { isEmojiMode } = this.state;\n    const { level, winningResult, destinationsCompleted } = this.props.gameState;\n    const { gameContent } = this.props;\n    return (\n      <div className=\"main\" style={screenBackground(level, winningResult)} align=\"center\">\n        <div className=\"homepage-link\">\n          <a href=\"http://ceci.dev/\">\n            <div className=\"button\">ceci.dev</div>\n          </a>\n        </div>\n        {level === 0 && (\n          <>\n            <FlyingStars isRandomized={isEmojiMode} />\n            <div className=\"start-screen\">\n              <div className=\"start-header\" onClick={this.onEventHandler}>\n                <div className=\"start-the\">The</div>\n                <div className=\"start-color-quiz\"> Color Quiz</div>\n              </div>\n              <div className=\"start-subtext\">A colorful journey... <span class=\"underline\">{5 - destinationsCompleted.length}</span> destinations</div>\n              <div className=\"corner-text\">Click title to start!</div>\n              <div className=\"cool-mode button\" onClick={() => this.setState({ isEmojiMode: true })}>\n                emoji mode\n              </div>\n            </div>\n          </>\n        )}\n        {level === DATA.length - 1 && <div style={getResultCardsStyle(winningResult)}>{gameContent}</div>}\n        {level > 0 && level < DATA.length - 1 && <div>{gameContent}</div>}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Level from './Level';\nimport Layout from './Layout';\nimport { SET_LEVEL, SET_RESULTS, SET_NAME, RESET } from '../constants';\nimport '../index.css';\n\nexport default class Quiz extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      level: 0,\n      winningResult: 0,\n      result: [0, 0, 0, 0, 0],\n      destinationsCompleted: [],\n    };\n  }\n\n  setGameState = (action, params = null) => {\n    if (action === SET_NAME) {\n      this.setState(() => ({\n        name: params.name,\n      }));\n    } else if (action === SET_RESULTS) {\n      // Changes level\n      // Store results into temporary variables\n      var resultTemp = this.state.result.slice();\n      var winningResultTemp = this.state.winningResult;\n\n      // Increment result score\n      resultTemp[params.result_index] = resultTemp[params.result_index] + params.add;\n\n      // Check to see what the winning result is now.\n      for (var n = 0; n < resultTemp.length; n++) {\n        if (resultTemp[n] > resultTemp[winningResultTemp]) {\n          winningResultTemp = n;\n        }\n      }\n\n      // Set the state\n      this.setState(() => ({\n        result: resultTemp,\n        winningResult: winningResultTemp,\n      }));\n    } else if (action === SET_LEVEL) {\n      this.setState(({ level }) => ({\n        level: level + 1,\n      }));\n    } else if (action === RESET) {\n      this.setState(({ destinationsCompleted }) => {\n        let newDestinationsCompleted = [...destinationsCompleted];\n        if (!destinationsCompleted.includes(params.resultAchieved)) {\n          newDestinationsCompleted.push(params.resultAchieved);\n        }\n        return {\n          level: 0,\n          winningResult: 0,\n          result: [0, 0, 0, 0, 0],\n          destinationsCompleted: newDestinationsCompleted,\n        };\n      });\n    }\n  };\n\n  // Render layout of question\n\n  render() {\n    const sharedProps = {\n      setGameState: this.setGameState,\n      gameState: this.state,\n    };\n\n    let gameContent = <Level {...sharedProps} />;\n    let quiz = <Layout gameContent={gameContent} {...sharedProps} />;\n\n    // Return quiz\n    return quiz;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Quiz from \"./components/Quiz\";\nimport \"./index.css\";\n\nReactDOM.render(<Quiz />, document.getElementById(\"root\"));\n"],"sourceRoot":""}