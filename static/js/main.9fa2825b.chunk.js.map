{"version":3,"sources":["components/HomepageLink.jsx","data.js","constants.js","style-functions.js","components/Pages/QuestionPage.jsx","components/ResultCards.jsx","components/Pages/ResultsPage.jsx","components/Pages/TitlePage.jsx","components/FlyingStars.jsx","components/App.jsx","index.js"],"names":["HomepageLink","className","href","DATA","name","type","question","choices","answer","result","add","color","getRandomHex","Math","random","toString","slice","randGradientBg","css","AnswerChoice","choice","onSelectAnswer","useState","showInput","setShowInput","input","onClick","value","style","onKeyPress","key","placeholder","QuestionPage","level","useParams","map","choiceI","substring","bind","resultPageStyle","Red","Blue","Yellow","Green","Black","Result","ResultsPage","onReset","resetBtnText","TitlePage","resultsLeft","onStartGame","onToggleEmojiMode","subtext","emojis","FlyingStars","emojiMode","flyingStars","character","emoji_i","floor","length","i","star","window","innerWidth","innerHeight","push","initState","withRouter","responses","setResponses","setEmojiMode","history","useHistory","incrLevel","p","location","pathname","nextNum","lastChar","Number","getQuestionNum","includes","toggleEmojiMode","s","getAchievementCount","resultsAchieved","localStorage","getItem","JSON","parse","resetGame","calculateScore","setItem","stringify","markAchievement","selectAnswer","markAnswer","finalTally","largest","lgstI","forEach","cObj","r","_","useEffect","listen","action","newS","pop","exact","path","render","props","to","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9fa2825b.chunk.js","sourcesContent":["import React from 'react';\n\nconst HomepageLink = () => (\n  <div className=\"homepage-link\">\n    <a href=\"http://ceci.dev/\">\n      <div className=\"homepage-btn button\">ceci.dev</div>\n    </a>\n  </div>\n);\n\nexport default HomepageLink;\n","import {\n  START,\n  QUESTION_TYPE_MULTIPLE,\n  RESULT_RED,\n  RESULT_BLUE,\n  RESULT_YELLOW,\n  RESULT_GREEN,\n  RESULT_BLACK,\n  RESULTS,\n} from './constants';\n\nconst DATA = [\n  {\n    name: 'start',\n    type: START,\n  },\n  {\n    type: QUESTION_TYPE_MULTIPLE,\n    question: 'Which of these fruits do you prefer?',\n    choices: [\n      {\n        answer: 'Apples, raspberries, or strawberries',\n        result: RESULT_BLUE,\n        add: 1,\n      },\n      {\n        answer: 'Blueberries',\n        result: RESULT_RED,\n        add: 1,\n      },\n      {\n        answer: 'Bananas',\n        result: RESULT_YELLOW,\n        add: 1,\n      },\n      {\n        answer: 'Grapes',\n        result: RESULT_GREEN,\n        add: 1,\n      },\n      {\n        answer: 'Blackberries',\n        result: RESULT_BLACK,\n        add: 1,\n      },\n    ],\n  },\n  {\n    type: QUESTION_TYPE_MULTIPLE,\n    question: 'What is your name?',\n    choices: [\n      {\n        answer: 'Denise',\n        result: 0,\n        add: 0,\n      },\n      {\n        answer: 'Josh',\n        result: 0,\n        add: 0,\n      },\n      {\n        answer: 'Not listed',\n        result: 0,\n        add: 0,\n      },\n    ],\n  },\n  {\n    type: QUESTION_TYPE_MULTIPLE,\n    question: 'If you were gifted a new car, what color would you paint it?',\n    choices: [\n      {\n        answer: 'Candy apple red',\n        result: RESULT_BLUE,\n        add: 1,\n      },\n      {\n        answer: 'Light blue sky',\n        result: RESULT_RED,\n        add: 1,\n      },\n      {\n        answer: 'Rainbow confetti',\n        result: RESULT_YELLOW,\n        add: 1,\n      },\n      {\n        answer: 'Iridescent',\n        result: RESULT_GREEN,\n        add: 1,\n      },\n      {\n        answer: 'Shadow gothic dark sadness matte black',\n        result: RESULT_BLACK,\n        add: 1,\n      },\n    ],\n  },\n\n  {\n    type: QUESTION_TYPE_MULTIPLE,\n    question: 'How is your day?',\n    choices: [\n      {\n        answer: 'Awesome',\n        result: RESULT_RED,\n        add: 1,\n      },\n      {\n        answer: 'Good',\n        result: RESULT_BLUE,\n        add: 1,\n      },\n      {\n        answer: 'Decent',\n        result: RESULT_YELLOW,\n        add: 1,\n      },\n      {\n        answer: 'Amiss',\n        result: RESULT_GREEN,\n        add: 1,\n      },\n      {\n        answer: 'Bad',\n        result: RESULT_BLACK,\n        add: 1,\n      },\n    ],\n  },\n  {\n    type: QUESTION_TYPE_MULTIPLE,\n    question: 'Pick a color that describes you: ',\n    choices: [\n      {\n        answer: 'Red',\n        result: RESULT_BLUE,\n        color: '#dc1717',\n        add: 500,\n      },\n      {\n        answer: 'Blue',\n        result: RESULT_RED,\n        color: '#0041ff',\n        add: 1,\n      },\n      {\n        answer: 'Yellow',\n        result: RESULT_YELLOW,\n        color: '#F3E13D',\n        add: 1,\n      },\n      {\n        answer: 'Magenta',\n        result: RESULT_GREEN,\n        color: '#e432ff',\n        add: 1,\n      },\n      {\n        answer: 'Purple',\n        result: RESULT_BLACK,\n        color: '#6c02ed',\n        add: 1,\n      },\n      {\n        answer: 'Isn\\'t that why I\\'m taking this quiz..?',\n        result: RESULT_BLACK,\n        add: 500\n      }\n    ],\n  },\n  {\n    name: 'results',\n    type: RESULTS,\n  },\n];\n\nexport default DATA;\n","export const START = \"start\";\nexport const QUESTION_TYPE_MULTIPLE = \"question-type-multiple\";\nexport const QUESTION_TYPE_IMAGE = \"question-type-image\";\nexport const QUESTION_TYPE_TEXTFIELD = \"question-type-textfield\";\nexport const QUESTION_TYPE_VIDEO = \"question-type-video\";\nexport const RESULTS = \"results\";\nexport const SET_LEVEL = \"set-level\";\nexport const SET_RESULTS = \"set-results\";\nexport const SET_NAME = \"set-name\";\nexport const TEXT = \"text\";\nexport const RESULT_RED = 0;\nexport const RESULT_BLUE = 1;\nexport const RESULT_YELLOW = 2;\nexport const RESULT_GREEN = 3;\nexport const RESULT_BLACK = 4;\nexport const RESET = 'reset';\n","/** @jsx jsx */\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport DATA from './data';\nimport { jsx, css } from '@emotion/react';\n\nexport const getRandomAngle = () => Math.random() * 360;\nexport const getRandomHex = () => (Math.random() * 255 ** 3).toString(16).slice(0, 6);\n\nexport const randGradientBg = () => css`\n  background-image: linear-gradient(${getRandomAngle()}deg, #${getRandomHex()}, #${getRandomHex()});\n`;\n\nconst coolEmojis = ['😀', '🥺', '🤬', '😄', '🤣', '🤠', '👺', '👅', '🎒'];\n\nexport const resultPageStyle = [\n  { backgroundColor: '#A11111', color: 'white' },\n  { backgroundColor: '#1141A1', color: 'white' },\n  { backgroundColor: '#F3E13D', color: 'black' },\n  { backgroundColor: '#6d914d', color: 'white' },\n  { backgroundColor: 'black', color: 'white' },\n];\n\nexport const getResultCardsStyle = (resultNumber) => {\n  let resultCardStyle = {};\n  switch (resultNumber) {\n    case 0:\n      resultCardStyle = { backgroundColor: '#A11111', color: 'white' };\n      break;\n    case 1:\n      resultCardStyle = { backgroundColor: '#1141A1', color: 'white' };\n      break;\n    case 2:\n      resultCardStyle = { backgroundColor: '#F3E13D', color: 'black' };\n      break;\n    case 3:\n      resultCardStyle = { backgroundColor: '#6d914d', color: 'white' };\n      break;\n    case 4:\n      resultCardStyle = { backgroundColor: 'black', color: 'white' };\n      break;\n    default:\n      break;\n  }\n  return resultCardStyle;\n};\n\nexport const getResultPageStyle = (rNum) => {\n  return [\n    { backgroundColor: '#A11111', color: 'white' },\n    { backgroundColor: '#1141A1', color: 'white' },\n    { backgroundColor: '#F3E13D', color: 'black' },\n    { backgroundColor: '#6d914d', color: 'white' },\n    { backgroundColor: 'black', color: 'white' },\n  ][rNum];\n};\n\nexport const screenBg = (level, winningResult) => {\n  if (level === 0) {\n    return {\n      backgroundImage: 'linear-gradient(45deg, #878CA6, #6298FE)',\n    };\n  } else if (level === DATA.length - 1) {\n    return getResultCardsStyle(winningResult);\n  }\n  return randGradientBg();\n};\n\n\nexport const FlyingStars = ({ isRandomized = false }) => {\n  let flyingStars = [];\n  let character = '*';\n  if (isRandomized) {\n    const emoji_i = Math.floor(Math.random() * coolEmojis.length);\n    character = coolEmojis[emoji_i];\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let star = (\n      <div\n        className=\"flying-stars\"\n        key={`flying-star-${i}`}\n        style={{\n          position: 'absolute',\n          left: (Math.random() * 1000 - 1050) * 2,\n          top: (Math.random() * 1000 - 1050) * 2,\n        }}\n      >\n        {character}\n      </div>\n    );\n    flyingStars.push(star);\n  }\n  return <div>{flyingStars}</div>;\n};\n","/** @jsx jsx */\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, useParams } from 'react-router-dom';\nimport { randGradientBg } from '../../style-functions';\nimport DATA from '../../data';\nimport { jsx, css } from '@emotion/react';\n\nconst AnswerChoice = ({ choice, onSelectAnswer }) => {\n  const [showInput, setShowInput] = useState(false);\n  const { answer, color, input } = choice;\n\n  const onKeyPressHandler = ({ key }) => {\n    if (key === 'Enter') {\n      setShowInput(false);\n      onSelectAnswer();\n    }\n  };\n\n  const onClickHandler = () => {\n    if (input) {\n      setShowInput(true);\n    } else {\n      onSelectAnswer();\n    }\n  };\n\n  return (\n    <div className=\"answer-choice\" onClick={onClickHandler}>\n      <input\n        className=\"select-btn\"\n        type=\"button\"\n        value={answer}\n      />\n      <label style={{ color }}>{' ' + answer}</label>\n      {showInput && (\n        <>\n        <input\n          className=\"feedback\"\n          type=\"text\"\n          onKeyPress={onKeyPressHandler}\n          placeholder=\"Your name\"\n        ></input>\n        <sup>Enter your name so I can add it here</sup>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst QuestionPage = ({ onSelectAnswer }) => {\n  const { level } = useParams();\n  const question = DATA[level].question;\n  const choices = DATA[level].choices;\n\n  return (\n    <div className=\"page question-page\" css={randGradientBg()}>\n      <div className=\"content\">\n        <div className=\"question-container\">\n          <div className=\"question\">{question}</div>\n          <div className=\"answers\">\n            {choices.map((choice, choiceI) => (\n              <AnswerChoice\n                key={choice.answer.substring(0, 6)}\n                choice={choice}\n                onSelectAnswer={onSelectAnswer.bind(null, choiceI)}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default QuestionPage;\n","/** @jsx jsx */\nimport React from 'react';\nimport { jsx, css } from '@emotion/react';\n\nconst redStyle = css`\n  color: white;\n  background-color: #A11111;\n`;\n\nconst blueStyle = css`\n  color: white;\n  background-color: #1141A1;\n`;\n\nconst yellowStyle = css`\n  color: black;\n  background-color: #F3E13D;\n`;\n\nconst greenStyle = css`\n  color: white;\n  background-color: #6d914d;\n`;\n\nconst blackStyle = css`\n  color: white;\n  background-color: black;\n`;\n\nexport const resultPageStyle = [\n  redStyle,\n  blueStyle,\n  yellowStyle,\n  greenStyle,\n  blackStyle\n];\n\nexport const Red = () => (\n  <div>\n    <h1>You're red!</h1>\n    <p>Good job! This is a good color.</p>\n  </div>\n);\n\nexport const Blue = () => (\n  <div>\n    <h1>You are the color BLUE.</h1>\n    <p>Thought you were going to get red, didn't you? You're probably not the type to expect the unexpected. ¯\\_(ツ)_/¯</p>\n  </div>\n);\n\nexport const Yellow = () => (\n  <div>\n    <h1>You are the color YELLOW.</h1>\n    <p>\n      Pat yourself on the back real hard now because yellow is the best color.\n    </p>\n  </div>\n);\n\nexport const Green = () => (\n  <div>\n    <h1>You are the color GREEN.</h1>\n    <p>\n      Riding the waves of life, you are constantly searching for a purpose. Before, you were asleep. But now, you are awake. Your eyes were closed but now you see. That door that was previously closed\n      is now open. You miss 100% of the shots you don't take. Real eyes realize real lies. Get out there. Otherwise, you'll stay inside.\n    </p>\n  </div>\n);\n\nexport const Black = () => (\n  <div>\n    <h1>You are the color BLACK.</h1>\n    <p>Black. You're a contrarian: Edgy and disagreeable. You have encountered many life complications due to your personality defects.</p>\n  </div>\n);\n","/** @jsx jsx */\nimport React from 'react';\nimport { jsx, css } from '@emotion/react';\nimport {\n  RESULT_RED,\n  RESULT_BLUE,\n  RESULT_YELLOW,\n  RESULT_GREEN,\n  RESULT_BLACK,\n} from '../../constants';\nimport {\n  Red,\n  Blue,\n  Yellow,\n  Green,\n  Black,\n  resultPageStyle,\n} from '../ResultCards';\n\nconst Result = ({ result }) => {\n  switch (result) {\n    case RESULT_RED:\n      return <Red />;\n\n    case RESULT_BLUE:\n      return <Blue />;\n\n    case RESULT_YELLOW:\n      return <Yellow />;\n\n    case RESULT_GREEN:\n      return <Green />;\n\n    case RESULT_BLACK:\n      return <Black />;\n\n    default:\n      return null;\n  }\n};\n\nconst ResultsPage = ({ onReset, result }) => {\n  const resetBtnText = result !== RESULT_YELLOW ? 'Try again?' : 'Tubular!';\n  return (\n    <div className=\"page results-page\" css={resultPageStyle[result]}>\n      <div className=\"content\">\n        <div className=\"results-page-inner\">\n          <Result result={result} />\n          <div className=\"button try-again\" onClick={() => onReset()}>\n            {resetBtnText}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResultsPage;\n","import React from 'react';\n\nconst TitlePage = ({ resultsLeft, onStartGame, onToggleEmojiMode }) => {\n  let subtext = null;\n  if (resultsLeft === 0) {\n    subtext = <>You've played enough of this game. Now go do something else.</>;\n  } else if (resultsLeft === 1) {\n    subtext = (\n      <>\n        A colorful journey... {resultsLeft}{' '}\n        more result. <br/> Think you can you find it?\n      </>\n    );\n  } else {\n    subtext = (\n      <>\n        A colorful journey... {resultsLeft}{' '}\n        different possibilities. <br/>Can you find them all?\n      </>\n    );\n  }\n\n  return (\n    <div className=\"page title-page\">\n      <div className=\"title-header\" onClick={onStartGame}>\n        <span className=\"the\">The</span>\n        Color Quiz\n      </div>\n      <div className=\"title-subtext\">\n        {subtext}\n      </div>\n      <div className=\"corner-text\">Click title to start!</div>\n      <div className=\"emoji-mode button\" onClick={onToggleEmojiMode}>\n        emoji mode\n      </div>\n    </div>\n  );\n};\n\nexport default TitlePage;\n","/** @jsx jsx */\nimport React from 'react';\nimport { jsx, css } from '@emotion/react';\n\nconst  emojis = ['😀', '🥺', '🤬', '😄', '🤣', '🤠', '👺', '👅', '🎒'];\n\nconst starStyle = () => css`\n  position: absolute;\n  left: ${(Math.random() * window.innerWidth - window.innerWidth) * 2}px;\n  top: ${(Math.random() * window.innerHeight - window.innerHeight) * 2}px;\n`;\n\nconst FlyingStars = ({ emojiMode = false }) => {\n  let flyingStars = [];\n  let character = '*';\n\n  if (emojiMode) {\n\n    const emoji_i = Math.floor(Math.random() * emojis.length);\n    character = emojis[emoji_i];\n  }\n\n  for (let i = 0; i < 50; i++) {\n    let star = (\n      <div\n        className=\"star\"\n        key={`fs-${i}`}\n        css={starStyle()}\n      >\n        {character}\n      </div>\n    );\n    flyingStars.push(star);\n  }\n  return <div className=\"flying-stars\">{flyingStars}</div>;\n};\n\n\nexport default FlyingStars;\n","import React, { useState, useEffect } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,\n  Redirect,\n  useHistory,\n  withRouter,\n} from 'react-router-dom';\nimport HomepageLink from './HomepageLink';\nimport DATA from '../data';\nimport QuestionPage from './Pages/QuestionPage';\nimport ResultsPage from './Pages/ResultsPage';\nimport TitlePage from './Pages/TitlePage';\nimport FlyingStars from './FlyingStars';\n\nconst initState = {\n  responses: [],\n  emojiMode: false,\n  result: -1,\n};\n\nconst getQuestionNum = (p) => {\n  const lastChar = p.substring(p.length - 1, p.length);\n  const num = Number(lastChar);\n  return num;\n};\n\nconst App = () => {\n  const [responses, setResponses] = useState(initState.responses);\n  const [emojiMode, setEmojiMode] = useState(initState.emojiMode);\n\n  let history = useHistory();\n\n  const incrLevel = () => {\n    const p = history.location.pathname;\n    const nextNum = getQuestionNum(p) + 1;\n    if (p === '/color-quiz') {\n      history.push('/question/1');\n    } else if (p.includes('/question/') && nextNum < DATA.length - 1) {\n      history.push('/question/' + nextNum);\n    } else {\n      history.push('/results');\n    }\n  };\n\n  const toggleEmojiMode = () => setEmojiMode((s) => !s);\n\n  const markAnswer = (choiceI) => setResponses((s) => [...s, choiceI]);\n\n  const popAnswer = () =>\n    setResponses((s) => {\n      const newS = [...s];\n      newS.pop();\n      return newS;\n    });\n\n  const markAchievement = () => {\n    const result = calculateScore();\n    let resultsAchieved = [];\n    if (localStorage.getItem('resultsAchieved')) {\n      resultsAchieved = JSON.parse(localStorage.getItem('resultsAchieved'));\n    }\n    if (!resultsAchieved.includes(result) && result > -1) {\n      resultsAchieved.push(result);\n    }\n    localStorage.setItem('resultsAchieved', JSON.stringify(resultsAchieved));\n  };\n\n  const getAchievementCount = () => {\n    let resultsAchieved = [];\n    if (localStorage.getItem('resultsAchieved')) {\n      resultsAchieved = JSON.parse(localStorage.getItem('resultsAchieved'));\n    }\n    return resultsAchieved.length;\n  };\n\n  const resetGame = () => {\n    markAchievement();\n    setResponses(initState.responses);\n    history.push('/color-quiz');\n  };\n\n  const selectAnswer = (choiceI) => {\n    markAnswer(choiceI);\n    incrLevel();\n  };\n\n\n  const calculateScore = () => {\n    try {\n      let finalTally = [0, 0, 0, 0, 0];\n      let largest = -1;\n      let lgstI = -1;\n\n      responses.forEach((choice, i) => {\n        const cObj = DATA[i + 1].choices[choice];\n        finalTally[cObj.result] += cObj.add;\n      });\n\n      finalTally.forEach((r, i) => {\n        if (r > largest) {\n          largest = r;\n          lgstI = i;\n        }\n      });\n      return lgstI;\n    } catch (_) {\n      return 0;\n    }\n  };\n\n  useEffect(() => {\n    return history.listen((location) => {\n      if (history.action === 'POP') {\n        popAnswer();\n        if (location.pathname === '/color-quiz') {\n          resetGame();\n        }\n      }\n    });\n  }, [history, responses]);\n\n  return (\n    <div className=\"app\">\n      <HomepageLink />\n      <Switch>\n        <Route\n          exact\n          path=\"/color-quiz\"\n          render={(props) => (\n            <>\n              <FlyingStars emojiMode={emojiMode} />\n              <TitlePage\n                {...props}\n                onStartGame={incrLevel}\n                onToggleEmojiMode={toggleEmojiMode}\n                resultsLeft={5 - getAchievementCount()}\n              />\n            </>\n          )}\n        ></Route>\n        <Route\n          path=\"/question/:level\"\n          render={(props) => (\n            <>\n              <FlyingStars emojiMode={emojiMode} />\n              <QuestionPage {...props} onSelectAnswer={selectAnswer} />\n            </>\n          )}\n        ></Route>\n        <Route\n          path=\"/results\"\n          render={(props) => (\n            <ResultsPage\n              {...props}\n              onReset={resetGame}\n              result={calculateScore()}\n            />\n          )}\n        ></Route>\n        <Redirect to=\"/color-quiz\" />\n      </Switch>\n    </div>\n  );\n};\n\nexport default withRouter(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './components/styles/index.scss';\nimport {\n  BrowserRouter as Router,\n} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}