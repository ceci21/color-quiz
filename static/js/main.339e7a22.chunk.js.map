{"version":3,"sources":["components/HomepageLink.jsx","data.js","constants.js","style-functions.js","components/Pages/QuestionPage.jsx","components/ResultCards.jsx","components/Pages/ResultsPage.jsx","components/Pages/TitlePage.jsx","components/FlyingStars.jsx","components/App.jsx","index.js"],"names":["HomepageLink","className","href","DATA","name","type","question","choices","answer","result","add","getRandomHex","Math","random","toString","slice","randGradientBg","css","QuestionPage","onSelectAnswer","level","useParams","map","choice","choiceI","onClick","value","resultPageStyle","Red","Blue","Yellow","Green","Black","Result","ResultsPage","onReset","TitlePage","resultsLeft","onStartGame","onToggleEmojiMode","emojis","FlyingStars","emojiMode","flyingStars","character","emoji_i","floor","length","i","star","key","window","innerWidth","innerHeight","push","initState","withRouter","useState","answers","setAnswers","setResult","setEmojiMode","history","useHistory","incrLevel","p","location","pathname","nextNum","lastChar","substring","Number","getQuestionNum","includes","calculateScore","toggleEmojiMode","s","getAchievementCount","resultsAchieved","localStorage","getItem","JSON","parse","selectAnswer","console","log","markAnswer","resetGame","setItem","stringify","markAchievement","finalTally","forEach","cObj","tally","largest","lgstI","r","getResult","useEffect","listen","action","newS","pop","exact","path","render","props","to","ReactDOM","document","getElementById"],"mappings":"uOAUeA,EARM,kBACnB,yBAAKC,UAAU,iBACb,uBAAGC,KAAK,oBACN,yBAAKD,UAAU,uBAAf,eCgKSE,EA1JF,CACT,CAEIC,KAAM,QACNC,KCfa,SDiBjB,CAEID,KAAM,eACNC,KCnB8B,yBDoB9BC,SAAU,uCACVC,QAAS,CACL,CAEIC,OAAQ,YACRC,OChBU,EDiBVC,IAAK,GAET,CAEIF,OAAQ,QACRC,OCrBW,EDsBXC,IAAK,GAET,CAEIF,OAAQ,SACRC,OC1Ba,ED2BbC,IAAK,GAET,CAEIF,OAAQ,QACRC,OC/BY,EDgCZC,IAAK,GAET,CAEIF,OAAQ,uCACRC,OCpCY,EDqCZC,IAAK,KAIjB,CAEIN,KAAM,eACNC,KCzD8B,yBD0D9BC,SAAU,qBACVC,QAAS,CACL,CAEIC,OAAQ,SACRC,OAAQ,EACRC,IAAK,GAET,CAEIF,OAAQ,SACRC,OAAQ,EACRC,IAAK,GAET,CAEIF,OAAQ,aACRC,OAAQ,EACRC,IAAK,KAIjB,CAEIN,KAAM,iBACNC,KCnF8B,yBDoF9BC,SAAU,mBACVC,QAAS,CACL,CAEIC,OAAQ,UACRC,OChFU,EDiFVC,IAAK,GAET,CAEIF,OAAQ,OACRC,OCrFW,EDsFXC,IAAK,GAET,CAEIF,OAAQ,SACRC,OC1Fa,ED2FbC,IAAK,GAET,CAEIF,OAAQ,QACRC,OC/FY,EDgGZC,IAAK,GAET,CAEIF,OAAQ,MACRC,OCpGY,EDqGZC,IAAK,KAIjB,CAEIN,KAAM,gBACNC,KCzH8B,yBD0H9BC,SAAU,oCACVC,QAAS,CACL,CAEIC,OAAQ,MACRC,OCrHW,EDsHXC,IAAK,GAET,CAEIF,OAAQ,OACRC,OC5HU,ED6HVC,IAAK,GAET,CAEIF,OAAQ,SACRC,OChIa,EDiIbC,IAAK,GAET,CAEIF,OAAQ,UACRC,OCrIY,EDsIZC,IAAK,GAET,CAEIF,OAAQ,SACRC,OC1IY,ED2IZC,IAAK,KAIjB,CAEIN,KAAM,UACNC,KC3Je,Y,sBCEVM,EAAe,kBAAOC,KAAKC,SAALD,KAAA,IAAgB,IAAO,IAAGE,SAAS,IAAIC,MAAM,EAAG,IAEtEC,EAAiB,kBAAMC,YAAL,IAAD,iFAHsB,IAAhBL,KAAKC,SAIsBF,IAAoBA,MC6BpEO,EA7BM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eACdC,EAAUC,cAAVD,MACFd,EAAWH,EAAKiB,GAAOd,SACvBC,EAAUJ,EAAKiB,GAAOb,QAE5B,OACE,mBAAKN,UAAU,qBAAqBgB,IAAKD,KACvC,mBAAKf,UAAU,WACb,mBAAKA,UAAU,sBACb,mBAAKA,UAAU,YAAYK,GAC3B,mBAAKL,UAAU,WACZM,EAAQe,KAAI,SAACC,EAAQC,GAAT,OACX,uBACE,qBACEvB,UAAU,aACVI,KAAK,SACLoB,QAAS,kBAAMN,EAAeK,IAC9BE,MAAOH,EAAOf,SAEhB,yBAAQ,IAAMe,EAAOf,iBCAxBmB,EAAkB,CAzBdV,YAAH,2EAKIA,YAAH,2EAKKA,YAAH,2EAKEA,YAAH,2EAKGA,YAAH,0EAaHW,EAAM,kBACjB,uBACE,qCACA,0DAISC,EAAO,kBAClB,uBACE,iDACA,gIAISC,EAAS,kBACpB,uBACE,mDACA,mGAMSC,EAAQ,kBACnB,uBACE,kDACA,gWAOSC,EAAQ,kBACnB,uBACE,kDACA,2JCtDEC,EAAS,SAAC,GACd,OAD6B,EAAbxB,QAEd,KJXsB,EIYpB,OAAO,YAAC,EAAD,MAET,KJbuB,EIcrB,OAAO,YAAC,EAAD,MAET,KJfyB,EIgBvB,OAAO,YAAC,EAAD,MAET,KJjBwB,EIkBtB,OAAO,YAAC,EAAD,MAET,KJnBwB,EIoBtB,OAAO,YAAC,EAAD,MAET,QACE,OAAO,OAmBEyB,EAfK,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,QAAS1B,EAAa,EAAbA,OAC9B,OACE,mBAAKR,UAAU,oBAAoBgB,IAAKU,EAAgBlB,IACtD,mBAAKR,UAAU,WACb,mBAAKA,UAAU,sBACb,YAAC,EAAD,CAAQQ,OAAQA,IAChB,mBAAKR,UAAU,mBAAmBwB,QAAS,kBAAMU,MAAjD,kBCzBKC,EApBG,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,kBAC7C,OACE,yBAAKtC,UAAU,mBAEb,yBAAKA,UAAU,eAAewB,QAASa,GACrC,0BAAMrC,UAAU,OAAhB,OADF,cAIA,yBAAKA,UAAU,iBAAf,yBACwB,0BAAMA,UAAU,aAAaoC,GAAoB,IADzE,iBAIA,yBAAKpC,UAAU,eAAf,yBACA,yBAAKA,UAAU,oBAAoBwB,QAASc,GAA5C,gBCXCC,EAAS,CAAC,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,eAAM,gBAkClDC,EA1BK,SAAC,GAA2B,IAAD,IAAxBC,UACjBC,EAAc,GACdC,EAAY,IAEhB,QAJ6C,SAI9B,CAEb,IAAMC,EAAUjC,KAAKkC,MAAMlC,KAAKC,SAAW2B,EAAOO,QAClDH,EAAYJ,EAAOK,GAGrB,IAAK,IAAIG,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAIC,EACF,mBACEhD,UAAU,OACViD,IAAG,aAAQF,GACX/B,IArBgBA,YAAL,MAAD,2EAEkD,GAAzDL,KAAKC,SAAWsC,OAAOC,WAAaD,OAAOC,YACe,GAA3DxC,KAAKC,SAAWsC,OAAOE,YAAcF,OAAOE,eAoB7CT,GAGLD,EAAYW,KAAKL,GAEnB,OAAO,mBAAKhD,UAAU,gBAAgB0C,IChBlCY,EACK,GADLA,GAEO,EAFPA,GAGK,EAsJIC,eA7IH,WAAO,IAAD,EACcC,mBAASF,GADvB,mBACTG,EADS,KACAC,EADA,OAEYF,mBAASF,GAFrB,mBAET9C,EAFS,KAEDmD,EAFC,OAGkBH,mBAASF,GAH3B,mBAGTb,EAHS,KAGEmB,EAHF,KAKZC,EAAUC,cAERC,EAAY,WAChB,IAAMC,EAAIH,EAAQI,SAASC,SACrBC,EAfa,SAACH,GACtB,IAAMI,EAAWJ,EAAEK,UAAUL,EAAElB,OAAS,EAAGkB,EAAElB,QAE7C,OADYwB,OAAOF,GAaDG,CAAeP,GAAK,EAC1B,MAANA,EACFH,EAAQR,KAAK,eACJW,EAAEQ,SAAS,eAAiBL,EAAUjE,EAAK4C,OAAS,EAC7De,EAAQR,KAAK,aAAec,IAE5BM,IACAZ,EAAQR,KAAK,cAIXqB,EAAkB,kBAAMd,GAAa,SAACe,GAAD,OAAQA,MAyB7CC,EAAsB,WAC1B,IAAIC,EAAkB,GAItB,OAHIC,aAAaC,QAAQ,qBACvBF,EAAkBG,KAAKC,MAAMH,aAAaC,QAAQ,qBAE7CF,EAAgB/B,QAGnBoC,EAAe,SAAC3D,GACpB4D,QAAQC,IAAI7D,GAhCK,SAACA,GAClBmC,GAAW,SAACiB,GACV,MAAM,GAAN,mBAAWA,GAAX,CAAcpD,OA+BhB8D,CAAW9D,GACXwC,KAGIuB,EAAY,YAzBM,WACtB,IAAIT,EAAkB,GAClBC,aAAaC,QAAQ,qBACvBF,EAAkBG,KAAKC,MAAMH,aAAaC,QAAQ,sBAE/CF,EAAgBL,SAAShE,IAAWA,GAAU,GACjDqE,EAAgBxB,KAAK7C,GAEvBsE,aAAaS,QAAQ,kBAAmBP,KAAKQ,UAAUX,IAkBvDY,GACA/B,EAAWJ,GACXO,EAAQR,KAAK,MAeToB,EAAiB,WACrB,IAAIiB,EAAa,CAAC,EAAG,EAAG,EAAG,EAAG,GAC9BjC,EAAQkC,SAAQ,SAACrE,EAAQyB,GACvB,IAAM6C,EAAO1F,EAAK6C,EAAI,GAAGzC,QAAQgB,GACjCoE,EAAWE,EAAKpF,SAAWoF,EAAKnF,OAElCkD,EAlBgB,SAACkC,GACjB,IAAIC,GAAW,EACXC,GAAS,EAOb,OANAF,EAAMF,SAAQ,SAACK,EAAGjD,GACZiD,EAAIF,IACNA,EAAUE,EACVD,EAAQhD,MAGLgD,EASGE,CAAUP,KActB,OAXAQ,qBAAU,WACR,OAAOrC,EAAQsC,QAAO,SAAClC,GACE,QAAnBJ,EAAQuC,SA5Dd1C,GAAW,SAACiB,GACV,IAAM0B,EAAI,YAAO1B,GAEjB,OADA0B,EAAKC,MACED,KA2DqB,MAAtBpC,EAASC,UACXoB,UAIL,CAAC7B,EAASI,IAGX,yBAAK7D,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEuG,OAAK,EACLC,KAAK,IACLC,OAAQ,SAACC,GAAD,OACN,oCACE,kBAAC,EAAD,CAAajE,UAAWA,IACxB,kBAAC,EAAD,iBACMiE,EADN,CAEErE,YAAa0B,EACbzB,kBAAmBoC,EACnBtC,YAAa,EAAIwC,WAKzB,kBAAC,IAAD,CACE4B,KAAK,mBACLC,OAAQ,SAACC,GAAD,OACN,oCACE,kBAAC,EAAD,CAAajE,UAAWA,IACxB,kBAAC,EAAD,iBAAkBiE,EAAlB,CAAyBxF,eAAgBgE,SAI/C,kBAAC,IAAD,CACEsB,KAAK,WACLC,OAAQ,SAACC,GACP,GAAIlG,GAAU,EACZ,OAAO,kBAAC,EAAD,iBAAiBkG,EAAjB,CAAwBxE,QAASoD,EAAW9E,OAAQA,KAE3DqD,EAAQR,KAAK,QAInB,kBAAC,IAAD,CAAUsD,GAAG,W,gBC7JrBC,IAASH,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFI,SAASC,eAAe,W","file":"static/js/main.339e7a22.chunk.js","sourcesContent":["import React from 'react';\n\nconst HomepageLink = () => (\n  <div className=\"homepage-link\">\n    <a href=\"http://ceci.dev/\">\n      <div className=\"homepage-btn button\">ceci.dev</div>\n    </a>\n  </div>\n);\n\nexport default HomepageLink;\n","import {\n    START,\n    QUESTION_TYPE_MULTIPLE,\n    RESULT_RED,\n    RESULT_BLUE,\n    RESULT_YELLOW,\n    RESULT_GREEN,\n    RESULT_BLACK,\n    RESULTS\n} from \"./constants\";\n\nconst DATA = [\n    {\n        // START\n        name: \"start\",\n        type: START\n    },\n    {\n        // Question one\n        name: \"question-one\",\n        type: QUESTION_TYPE_MULTIPLE,\n        question: \"Which of these fruits do you prefer?\",\n        choices: [\n            {\n                // Choice one\n                answer: \"Blueberry\",\n                result: RESULT_RED,\n                add: 1\n            },\n            {\n                // Choice two\n                answer: \"Apple\",\n                result: RESULT_BLUE,\n                add: 1\n            },\n            {\n                // Choice three\n                answer: \"Banana\",\n                result: RESULT_YELLOW,\n                add: 1\n            },\n            {\n                // Choice four\n                answer: \"Grape\",\n                result: RESULT_GREEN,\n                add: 1\n            },\n            {\n                // Choice five\n                answer: \"\\\"I don't like fruit. It scares me.\\\"\",\n                result: RESULT_BLACK,\n                add: 1\n            }\n        ]\n    },\n    {\n        // Question two, this question doesn't influence the results at all.\n        name: \"question-two\",\n        type: QUESTION_TYPE_MULTIPLE,\n        question: \"What is your name?\",\n        choices: [\n            {\n                // Choice one\n                answer: \"Joshua\",\n                result: 0,\n                add: 0\n            },\n            {\n                // Choice two\n                answer: \"Denise\",\n                result: 0,\n                add: 0\n            },\n            {\n                // Choice three\n                answer: \"Not listed\",\n                result: 0,\n                add: 0\n            }\n        ]\n    },\n    {\n        // Question three\n        name: \"question-three\",\n        type: QUESTION_TYPE_MULTIPLE,\n        question: \"How is your day?\",\n        choices: [\n            {\n                // Choice one\n                answer: \"Awesome\",\n                result: RESULT_RED,\n                add: 1\n            },\n            {\n                // Choice two\n                answer: \"Good\",\n                result: RESULT_BLUE,\n                add: 1\n            },\n            {\n                // Choice three\n                answer: \"Decent\",\n                result: RESULT_YELLOW,\n                add: 1\n            },\n            {\n                // Choice four\n                answer: \"Amiss\",\n                result: RESULT_GREEN,\n                add: 1\n            },\n            {\n                // Choice five\n                answer: \"Bad\",\n                result: RESULT_BLACK,\n                add: 1\n            }\n        ]\n    },\n    {\n        // Question four\n        name: \"question-four\",\n        type: QUESTION_TYPE_MULTIPLE,\n        question: \"Pick a color that describes you: \",\n        choices: [\n            {\n                // Choice one\n                answer: \"Red\",\n                result: RESULT_BLUE,\n                add: 5\n            },\n            {\n                // Choice two\n                answer: \"Blue\",\n                result: RESULT_RED,\n                add: 1\n            },\n            {\n                // Choice three\n                answer: \"Yellow\",\n                result: RESULT_YELLOW,\n                add: 1\n            },\n            {\n                // Choice four\n                answer: \"Magenta\",\n                result: RESULT_GREEN,\n                add: 1\n            },\n            {\n                // Choice five\n                answer: \"Purple\",\n                result: RESULT_BLACK,\n                add: 1\n            }\n        ]\n    },\n    {\n        // Results\n        name: \"results\",\n        type: RESULTS\n    }\n];\n\n\nexport default DATA;\n","export const START = \"start\";\nexport const QUESTION_TYPE_MULTIPLE = \"question-type-multiple\";\nexport const QUESTION_TYPE_IMAGE = \"question-type-image\";\nexport const QUESTION_TYPE_TEXTFIELD = \"question-type-textfield\";\nexport const QUESTION_TYPE_VIDEO = \"question-type-video\";\nexport const RESULTS = \"results\";\nexport const SET_LEVEL = \"set-level\";\nexport const SET_RESULTS = \"set-results\";\nexport const SET_NAME = \"set-name\";\nexport const TEXT = \"text\";\nexport const RESULT_RED = 0;\nexport const RESULT_BLUE = 1;\nexport const RESULT_YELLOW = 2;\nexport const RESULT_GREEN = 3;\nexport const RESULT_BLACK = 4;\nexport const RESET = 'reset';\n","/** @jsx jsx */\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport DATA from './data';\nimport { jsx, css } from '@emotion/react';\n\nexport const getRandomAngle = () => Math.random() * 360;\nexport const getRandomHex = () => (Math.random() * 255 ** 3).toString(16).slice(0, 6);\n\nexport const randGradientBg = () => css`\n  background-image: linear-gradient(${getRandomAngle()}deg, #${getRandomHex()}, #${getRandomHex()});\n`;\n\nconst coolEmojis = ['😀', '🥺', '🤬', '😄', '🤣', '🤠', '👺', '👅', '🎒'];\n\nexport const resultPageStyle = [\n  { backgroundColor: '#A11111', color: 'white' },\n  { backgroundColor: '#1141A1', color: 'white' },\n  { backgroundColor: '#F3E13D', color: 'black' },\n  { backgroundColor: '#6d914d', color: 'white' },\n  { backgroundColor: 'black', color: 'white' },\n];\n\nexport const getResultCardsStyle = (resultNumber) => {\n  let resultCardStyle = {};\n  switch (resultNumber) {\n    case 0:\n      resultCardStyle = { backgroundColor: '#A11111', color: 'white' };\n      break;\n    case 1:\n      resultCardStyle = { backgroundColor: '#1141A1', color: 'white' };\n      break;\n    case 2:\n      resultCardStyle = { backgroundColor: '#F3E13D', color: 'black' };\n      break;\n    case 3:\n      resultCardStyle = { backgroundColor: '#6d914d', color: 'white' };\n      break;\n    case 4:\n      resultCardStyle = { backgroundColor: 'black', color: 'white' };\n      break;\n    default:\n      break;\n  }\n  return resultCardStyle;\n};\n\nexport const getResultPageStyle = (rNum) => {\n  return [\n    { backgroundColor: '#A11111', color: 'white' },\n    { backgroundColor: '#1141A1', color: 'white' },\n    { backgroundColor: '#F3E13D', color: 'black' },\n    { backgroundColor: '#6d914d', color: 'white' },\n    { backgroundColor: 'black', color: 'white' },\n  ][rNum];\n};\n\nexport const screenBg = (level, winningResult) => {\n  if (level === 0) {\n    return {\n      backgroundImage: 'linear-gradient(45deg, #878CA6, #6298FE)',\n    };\n  } else if (level === DATA.length - 1) {\n    return getResultCardsStyle(winningResult);\n  }\n  return randGradientBg();\n};\n\n\nexport const FlyingStars = ({ isRandomized = false }) => {\n  let flyingStars = [];\n  let character = '*';\n  if (isRandomized) {\n    const emoji_i = Math.floor(Math.random() * coolEmojis.length);\n    character = coolEmojis[emoji_i];\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let star = (\n      <div\n        className=\"flying-stars\"\n        key={`flying-star-${i}`}\n        style={{\n          position: 'absolute',\n          left: (Math.random() * 1000 - 1050) * 2,\n          top: (Math.random() * 1000 - 1050) * 2,\n        }}\n      >\n        {character}\n      </div>\n    );\n    flyingStars.push(star);\n  }\n  return <div>{flyingStars}</div>;\n};\n","/** @jsx jsx */\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  useParams,\n} from 'react-router-dom';\nimport { randGradientBg } from '../../style-functions';\nimport DATA from '../../data';\nimport { jsx, css } from '@emotion/react';\n\nconst QuestionPage = ({ onSelectAnswer }) => {\n  const { level } = useParams();\n  const question = DATA[level].question;\n  const choices = DATA[level].choices;\n\n  return (\n    <div className=\"page question-page\" css={randGradientBg()}>\n      <div className=\"content\">\n        <div className=\"question-container\">\n          <div className=\"question\">{question}</div>\n          <div className=\"answers\">\n            {choices.map((choice, choiceI) => (\n              <div>\n                <input\n                  className=\"select-btn\"\n                  type=\"button\"\n                  onClick={() => onSelectAnswer(choiceI)}\n                  value={choice.answer}\n                />\n                <label>{' ' + choice.answer}</label>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default QuestionPage;\n","/** @jsx jsx */\nimport React from 'react';\nimport { jsx, css } from '@emotion/react';\n\nconst redStyle = css`\n  color: white;\n  background-color: #A11111;\n`;\n\nconst blueStyle = css`\n  color: white;\n  background-color: #1141A1;\n`;\n\nconst yellowStyle = css`\n  color: black;\n  background-color: #F3E13D;\n`;\n\nconst greenStyle = css`\n  color: white;\n  background-color: #6d914d;\n`;\n\nconst blackStyle = css`\n  color: white;\n  background-color: black;\n`;\n\nexport const resultPageStyle = [\n  redStyle,\n  blueStyle,\n  yellowStyle,\n  greenStyle,\n  blackStyle\n];\n\nexport const Red = () => (\n  <div>\n    <h1>You're red!</h1>\n    <p>Good job! This is a good color.</p>\n  </div>\n);\n\nexport const Blue = () => (\n  <div>\n    <h1>You are the color BLUE.</h1>\n    <p>Thought you were going to get red, didn't you? You're probably not the type to expect the unexpected.</p>\n  </div>\n);\n\nexport const Yellow = () => (\n  <div>\n    <h1>You are the color YELLOW.</h1>\n    <p>\n      Pat yourself on the back real hard now because yellow is the best color.\n    </p>\n  </div>\n);\n\nexport const Green = () => (\n  <div>\n    <h1>You are the color GREEN.</h1>\n    <p>\n      Riding the waves of life, you are constantly searching for a purpose. Before, you were asleep. But now, you are awake. Your eyes were closed but now you see. That door that was previously closed\n      is now open. You miss 100% of the shots you don't take. Real eyes realize real lies. Get out there. Otherwise, you'll stay inside.\n    </p>\n  </div>\n);\n\nexport const Black = () => (\n  <div>\n    <h1>You are the color BLACK.</h1>\n    <p>Black. You're a contrarian: Edgy and disagreeable. You have encountered many life complications due to your personality defects.</p>\n  </div>\n);\n","/** @jsx jsx */\nimport React from 'react';\nimport { jsx, css } from '@emotion/react';\nimport {\n  RESULT_RED,\n  RESULT_BLUE,\n  RESULT_YELLOW,\n  RESULT_GREEN,\n  RESULT_BLACK,\n} from '../../constants';\nimport {\n  Red,\n  Blue,\n  Yellow,\n  Green,\n  Black,\n  resultPageStyle,\n} from '../ResultCards';\n\nconst Result = ({ result }) => {\n  switch (result) {\n    case RESULT_RED:\n      return <Red />;\n\n    case RESULT_BLUE:\n      return <Blue />;\n\n    case RESULT_YELLOW:\n      return <Yellow />;\n\n    case RESULT_GREEN:\n      return <Green />;\n\n    case RESULT_BLACK:\n      return <Black />;\n\n    default:\n      return null;\n  }\n};\n\nconst ResultsPage = ({ onReset, result }) => {\n  return (\n    <div className=\"page results-page\" css={resultPageStyle[result]}>\n      <div className=\"content\">\n        <div className=\"results-page-inner\">\n          <Result result={result} />\n          <div className=\"button try-again\" onClick={() => onReset()}>\n            Try again?\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ResultsPage;\n","import React from 'react';\n\nconst TitlePage = ({ resultsLeft, onStartGame, onToggleEmojiMode }) => {\n  return (\n    <div className=\"page title-page\">\n      {/* <FlyingStars isRandomized={emojiMode} /> */}\n      <div className=\"title-header\" onClick={onStartGame}>\n        <span className=\"the\">The</span>\n        Color Quiz\n      </div>\n      <div className=\"title-subtext\">\n        A colorful journey... <span className=\"underline\">{resultsLeft}</span>{' '}\n        possibilities\n      </div>\n      <div className=\"corner-text\">Click title to start!</div>\n      <div className=\"emoji-mode button\" onClick={onToggleEmojiMode}>\n        emoji mode\n      </div>\n    </div>\n  );\n};\n\nexport default TitlePage;\n","/** @jsx jsx */\nimport React from 'react';\nimport { jsx, css } from '@emotion/react';\n\nconst  emojis = ['😀', '🥺', '🤬', '😄', '🤣', '🤠', '👺', '👅', '🎒'];\n\nconst starStyle = () => css`\n  position: absolute;\n  left: ${(Math.random() * window.innerWidth - window.innerWidth) * 2}px;\n  top: ${(Math.random() * window.innerHeight - window.innerHeight) * 2}px;\n`;\n\nconst FlyingStars = ({ emojiMode = false }) => {\n  let flyingStars = [];\n  let character = '*';\n\n  if (emojiMode) {\n\n    const emoji_i = Math.floor(Math.random() * emojis.length);\n    character = emojis[emoji_i];\n  }\n\n  for (let i = 0; i < 50; i++) {\n    let star = (\n      <div\n        className=\"star\"\n        key={`fs-${i}`}\n        css={starStyle()}\n      >\n        {character}\n      </div>\n    );\n    flyingStars.push(star);\n  }\n  return <div className=\"flying-stars\">{flyingStars}</div>;\n};\n\n\nexport default FlyingStars;\n","import React, { useState, useEffect } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useParams,\n  Redirect,\n  useHistory,\n  withRouter,\n} from 'react-router-dom';\nimport HomepageLink from './HomepageLink';\nimport DATA from '../data';\nimport QuestionPage from './Pages/QuestionPage';\nimport ResultsPage from './Pages/ResultsPage';\nimport TitlePage from './Pages/TitlePage';\nimport FlyingStars from './FlyingStars';\n\nconst initState = {\n  answers: [],\n  emojiMode: false,\n  result: -1,\n};\n\nconst getQuestionNum = (p) => {\n  const lastChar = p.substring(p.length - 1, p.length);\n  const num = Number(lastChar);\n  return num;\n};\n\nconst App = () => {\n  const [answers, setAnswers] = useState(initState.answers);\n  const [result, setResult] = useState(initState.result);\n  const [emojiMode, setEmojiMode] = useState(initState.emojiMode);\n\n  let history = useHistory();\n\n  const incrLevel = () => {\n    const p = history.location.pathname;\n    const nextNum = getQuestionNum(p) + 1;\n    if (p === '/') {\n      history.push('/question/1');\n    } else if (p.includes('/question/') && nextNum < DATA.length - 1) {\n      history.push('/question/' + nextNum);\n    } else {\n      calculateScore();\n      history.push('/results');\n    }\n  };\n\n  const toggleEmojiMode = () => setEmojiMode((s) => !s);\n\n  const markAnswer = (choiceI) =>\n    setAnswers((s) => {\n      return [...s, choiceI];\n    });\n\n  const popAnswer = () =>\n    setAnswers((s) => {\n      const newS = [...s];\n      newS.pop();\n      return newS;\n    });\n\n  const markAchievement = () => {\n    let resultsAchieved = [];\n    if (localStorage.getItem('resultsAchieved')) {\n      resultsAchieved = JSON.parse(localStorage.getItem('resultsAchieved'));\n    }\n    if (!resultsAchieved.includes(result) && result > -1) {\n      resultsAchieved.push(result);\n    }\n    localStorage.setItem('resultsAchieved', JSON.stringify(resultsAchieved));\n  };\n\n  const getAchievementCount = () => {\n    let resultsAchieved = [];\n    if (localStorage.getItem('resultsAchieved')) {\n      resultsAchieved = JSON.parse(localStorage.getItem('resultsAchieved'));\n    }\n    return resultsAchieved.length;\n  };\n\n  const selectAnswer = (choiceI) => {\n    console.log(choiceI);\n    markAnswer(choiceI);\n    incrLevel();\n  };\n\n  const resetGame = () => {\n    markAchievement();\n    setAnswers(initState.answers);\n    history.push('/');\n  };\n\n  const getResult = (tally) => {\n    let largest = -1;\n    let lgstI = -1;\n    tally.forEach((r, i) => {\n      if (r > largest) {\n        largest = r;\n        lgstI = i;\n      }\n    });\n    return lgstI;\n  };\n\n  const calculateScore = () => {\n    let finalTally = [0, 0, 0, 0, 0];\n    answers.forEach((choice, i) => {\n      const cObj = DATA[i + 1].choices[choice];\n      finalTally[cObj.result] += cObj.add;\n    });\n    setResult(getResult(finalTally));\n  };\n\n  useEffect(() => {\n    return history.listen((location) => {\n      if (history.action === 'POP') {\n        popAnswer();\n        if (location.pathname === '/') {\n          resetGame();\n        }\n      }\n    });\n  }, [answers, history]);\n\n  return (\n    <div className=\"app\">\n      <HomepageLink />\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={(props) => (\n            <>\n              <FlyingStars emojiMode={emojiMode} />\n              <TitlePage\n                {...props}\n                onStartGame={incrLevel}\n                onToggleEmojiMode={toggleEmojiMode}\n                resultsLeft={5 - getAchievementCount()}\n              />\n            </>\n          )}\n        ></Route>\n        <Route\n          path=\"/question/:level\"\n          render={(props) => (\n            <>\n              <FlyingStars emojiMode={emojiMode} />\n              <QuestionPage {...props} onSelectAnswer={selectAnswer} />\n            </>\n          )}\n        ></Route>\n        <Route\n          path=\"/results\"\n          render={(props) => {\n            if (result > -1) {\n              return <ResultsPage {...props} onReset={resetGame} result={result} />;\n            } else {\n              history.push('/');\n            }\n          }}\n        ></Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    </div>\n  );\n};\n\nexport default withRouter(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './components/styles/index.scss';\nimport {\n  BrowserRouter as Router,\n} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}